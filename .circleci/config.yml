# TODO:
# 1. PARRA_TEST_OUTPUT_DIRECTORY not working

orbs:
  # ruby: circleci/ruby@2.1.0
  # macos: circleci/macos@2.5.2
  bun: ksylvest/bun@1.0.1
  rust: circleci/rust@1.6.1

commands:
  common:
    steps:
      - checkout # Can't use shallow clone orbs because circle repo url env var isn't being set for some reason.
      - attach_workspace:
          at: .
      - bun/install
      - run:
          name: Install NPM Dependencies
          command: bun install --frozen-lockfile

  # load-env-vars:
  #   steps:
  #     - run:
  #         name: Loading Environment Variables
  #         command: |
  #           cat bash.env >> $BASH_ENV
  #           printenv

  # run-command-and-persist-variables:
  #   parameters:
  #     title:
  #       type: string
  #     command:
  #       type: string
  #     variables:
  #       type: string # CSV of variables to persist
  #     background:
  #       type: boolean
  #       default: false
  #   steps:
  #     - run:
  #         name: << parameters.title >>
  #         command: |
  #           # Important to source from the command that we're executing to store env vars that are
  #           # exported in the command.
  #           . << parameters.command >>

  #           # Iterate over variables and persist them
  #           IFS=',' read -ra ADDR \<<< "<< parameters.variables >>"
  #           for i in "${ADDR[@]}"; do
  #             value=$(eval echo \$$i)
  #             echo "Persisting variable: $i with value: $value"
  #             echo "export $i=$value" >> $BASH_ENV
  #           done

  #           printenv
  #           cp $BASH_ENV bash.env
  #         background: << parameters.background >>

  prepare_ios_prerequisites:
    steps:
      - run:
          name: Install Brew Dependencies
          command: ./scripts.sh ci --install-brew-dependencies
      # - run-command-and-persist-variables:
      #     title: Preboot Simulator
      #     command: ./scripts/bin/preboot-simulator.sh
      #     variables: PARRA_TEST_DEVICE_UDID
      #     # The time saved by running this in the background is negated by the increased time the
      #     # build-for-testing script will take if a simulator is mid booted when it starts.
      #     background: false
      - run:
          name: Extract ASC Credential
          command: |
            dirname $PARRA_ASC_API_KEY_PATH | xargs mkdir -p
            echo $PARRA_ASC_API_KEY | base64 --decode > $PARRA_ASC_API_KEY_PATH
      # - run:
      #     name: Disable Simulator Hardware Keyboard
      #     command: ./scripts.sh ci --disable-simulator-hardware-keyboard
      # - ruby/install-deps: # Don't need to set bundler-version, ORB looks for Gemfile.lock by default.
      #     path: /tmp/workspace/vendor
      #     include-branch-in-cache-key: false

executors:
  macos-m1-test-runner:
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.medium.gen1
    environment:
      PARRA_TEST_DERIVED_DATA_DIRECTORY: build/unit-tests/derivedData
      PARRA_TEST_OUTPUT_DIRECTORY: artifacts/unit-tests
      PARRA_TEST_PROJECT_NAME: ./Parra.xcodeproj
      PARRA_TEST_SCHEME_NAME: Parra
      PARRA_TEST_CONFIGURATION: Debug
      PARRA_TEST_DEVICE_NAME: iPhone 15
      PARRA_TEST_DEVICE_OS_VERSION: 17.4
      PARRA_TEST_DESTINATION: platform=iOS Simulator,name=iPhone 15,OS=17.4
      PARRA_ASC_API_KEY_PATH: ./artifacts/asc-key.p8
    working_directory: /tmp/workspace

  macos-m1-release-runner:
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.medium.gen1
    working_directory: /tmp/workspace

version: 2.1
jobs:
  build-and-test:
    executor: macos-m1-test-runner
    steps:
      - common
      - prepare_ios_prerequisites
      - run:
          name: Build for Testing
          command: ./cli.sh tests --build --log-level debug
      # - macos/wait-until-simulator-booted:
      #     device-udid-var: PARRA_TEST_DEVICE_UDID
      - run:
          name: Run Unit Tests
          command: ./cli.sh tests --run --log-level debug
      - store_test_results:
          path: build/unit-tests/derivedData/Logs/Test



  release-ios-sdk:
    executor: macos-m1-release-runner
    steps:
      - common
      - run:
          name: Determining Version
          command: echo "Preparing release $CIRCLE_TAG"
      - rust/install
      - run:
          name: Install Rust x86_64 Support
          command: rustup target install x86_64-apple-darwin
      - run:
          name: Prepare CLI Release
          command: |            
            cd cli; ./release_update.sh $CIRCLE_TAG
      - run:
          name: Create Sample App
          command: |
            ./cli/target/aarch64-apple-darwin/release/parra --template parra-sample-remote
      - run:
          name: Install Brew Dependencies
          command: |
            # Only install the brew deps we need for this step.
            export HOMEBREW_NO_AUTO_UPDATE=1
            export HOMEBREW_NO_INSTALL_CLEANUP=1
            export HOMEBREW_NO_INSTALL_UPGRADE=1
            export HOMEBREW_NO_ANALYTICS=1

            brew install gh --quiet

      # Triggered by tag. New tag has been created at this point
      # 0. Re-run sample app verification steps
      # 1. Update SDK version (don't need to do this, it's based on the already created tag)
      # 2. Update CLI version and create new build (cache artifacts dir) ([skip ci])
      # 3. Generate new sample app directory
      # 4. Create new commit and GitHub release "v${VERSION}" and attach CLI binaries (cache version, SHAs)
      # 5. Initiate webhook on tap repo
      # 6. (probably needs delay before starting) force merge to `parra-build-sample-app`


workflows:
  run-unit-tests:
    jobs:
      - build-and-test
  release-sdk:
    jobs:
      - release-ios-sdk:
          filters: 
            tags:
              only: # x.y.z
                - /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
            branches:
              ignore: /.*/
