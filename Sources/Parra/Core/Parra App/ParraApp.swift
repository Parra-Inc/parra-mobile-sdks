//
//  ParraApp.swift
//  Parra
//
//  Created by Mick MacCallum on 2/9/24.
//  Copyright Â© 2024 Parra, Inc. All rights reserved.
//

import SwiftUI

/// A top level wrapper around your SwiftUI app's content. When creating a
/// ``ParraApp``, you should supply it with an authentication provider and any
/// options that you would like to customize. The authentication provider is a
/// function that will be invoked periodically when Parra needs to
/// reauthenticate the user. This mechanism allows for Parra's authentication of
/// a user to be linked to their authentication with your backend. This function
/// is expected to resolve to an access token generated by your backend.
///
/// ## Example
/// Update your `@main` `App` declaration to a final class that inherits from
/// ``ParraApp``. You can indicate the classes that should be used for both your
/// app's `AppDelegate` and `SceneDelegate` by providing them as type parameters
/// on ``ParraApp``. If you have custom app/scene delegate implementations, they
/// will need to be updated to inherit from ``ParraAppDelegate`` and
/// ``ParraSceneDelegate`` respectively.
///
/// ```
/// import Parra
///
/// @main
/// final class SampleApp: ParraApp<ParraAppDelegate, ParraSceneDelegate> {
///     required init() {
///         super.init()
///
///         self.configureParra(
///             authConfiguration: // ...,
///             appContent: {
///                 ContentView()
///             }
///         )
///     }
/// }
/// ```
///
@MainActor
open class ParraApp<
    AppDelegateType: ParraAppDelegate,
    SceneDelegateType: ParraSceneDelegate
>: App {
    // MARK: - Lifecycle

    /// This initializer must be overriden and used to invoke the
    /// ``configureParra(authConfiguration:configuration:launchScreenConfig:appContent:)``
    /// method.
    public required init() {}

    // MARK: - Public

    public var body: some Scene {
        WindowGroup {
            if let appContent {
                AnyView(appContent)
            } else {
                fatalError()
            }
        }
    }

    /// <#Description#>
    /// - Parameters:
    ///   - workspaceId: <#workspaceId description#>
    ///   - applicationId: <#applicationId description#>
    ///   - authenticationMethod: <#authenticationMethod description#>
    ///   - configuration: <#configuration description#>
    ///   - launchScreenType: The type of launch screen that should be displayed
    ///   while Parra is being initialized. This should match up exactly with
    ///   the launch screen that you have configured in your project settings to
    ///   avoid any sharp transitions. If nothing is provided, we will attempt
    ///   to display the right launch screen automatically. This is done by
    ///   checking for a `UILaunchScreen` key in your Info.plist file. If an
    ///   entry is found, its child values will be used to layout the launch
    ///   screen. Next we look for the `UILaunchStoryboardName` key. If this is
    ///   not found, a blank white screen will be rendered.
    ///   - appContent: <#appContent description#>
    public func configureParra(
        workspaceId: String,
        applicationId: String,
        authenticationMethod: ParraAuthType =
            .parraAuth(),
        configuration: ParraConfiguration = .init(),
        launchScreenConfig: ParraLaunchScreen.Config? = nil,
        appContent: @MainActor @escaping () -> some ParraAppContent
    ) {
        guard self.appContent == nil else {
            fatalError("ParraApp content has already been set")
        }

        let appState = ParraAppState(
            tenantId: workspaceId,
            applicationId: applicationId
        )

        self.appContent = ParraAppView(
            target: .app(
                authenticationMethod,
                appState,
                launchScreenConfig
            ),
            configuration: configuration,
            viewContent: { _ in
                appContent()
            }
        )

        _appDelegate.wrappedValue.sceneDelegateClass = SceneDelegateType.self
    }

    // MARK: - Internal

    @UIApplicationDelegateAdaptor(AppDelegateType.self) var appDelegate

    // MARK: - Private

    private var appContent: (any View)?
}
