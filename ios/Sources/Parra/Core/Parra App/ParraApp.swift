//
//  ParraApp.swift
//  Parra
//
//  Created by Mick MacCallum on 2/9/24.
//  Copyright Â© 2024 Parra, Inc. All rights reserved.
//

import SwiftUI

private let logger = Logger()

/// A top level wrapper around your SwiftUI app's content. When creating a
/// ``ParraApp``, you should supply it with an authentication provider and any
/// options that you would like to customize. The authentication provider is a
/// function that will be invoked periodically when Parra needs to
/// reauthenticate the user. This mechanism allows for Parra's authentication of
/// a user to be linked to their authentication with your backend. This function
/// is expected to resolve to an access token generated by your backend.
///
/// ## Example
/// Update your `@main` `App` declaration to a final class that inherits from
/// ``ParraApp``. You can indicate the classes that should be used for both your
/// app's `AppDelegate` and `SceneDelegate` by providing them as type parameters
/// on ``ParraApp``. If you have custom app/scene delegate implementations, they
/// will need to be updated to inherit from ``ParraAppDelegate`` and
/// ``ParraSceneDelegate`` respectively.
///
/// ```
/// import Parra
///
/// @main
/// final class SampleApp: ParraApp<ParraAppDelegate, ParraSceneDelegate> {
///     required init() {
///         super.init()
///
///         self.configureParra(
///             authConfiguration: // ...,
///             appContent: {
///                 ContentView()
///             }
///         )
///     }
/// }
/// ```
@MainActor
public struct ParraApp<
    Content: Scene,
    SceneDelegateClass: ParraSceneDelegate
>: Scene {
    // MARK: - Lifecycle

    public init() {
        fatalError(
            "Parra must be initialized using init(tenantId:applicationId:appDelegate:)"
        )
    }

    /// <#Description#>
    /// - Parameters:
    ///   - tenantId: <#tenantId description#>
    ///   - applicationId: <#applicationId description#>
    ///   - authenticationMethod: <#authenticationMethod description#>
    ///   - configuration: <#configuration description#>
    ///   - launchScreenType: The type of launch screen that should be displayed
    ///   while Parra is being initialized. This should match up exactly with
    ///   the launch screen that you have configured in your project settings to
    ///   avoid any sharp transitions. If nothing is provided, we will attempt
    ///   to display the right launch screen automatically. This is done by
    ///   checking for a `UILaunchScreen` key in your Info.plist file. If an
    ///   entry is found, its child values will be used to layout the launch
    ///   screen. Next we look for the `UILaunchStoryboardName` key. If this is
    ///   not found, a blank white screen will be rendered.
    ///   - makeScene: <#appContent description#>
    public init(
        tenantId: String,
        applicationId: String,
        appDelegate: ParraAppDelegate<SceneDelegateClass>,
        configuration: ParraConfiguration = .init(),
        launchScreenConfig: ParraLaunchScreen.Config? = nil,
        @SceneBuilder makeScene: @MainActor @escaping () -> Content
    ) {
        let appState = ParraAppState(
            tenantId: tenantId,
            applicationId: applicationId
        )

        self.makeScene = makeScene
        // TODO: Support for other auth types
        self.authenticationMethod = .parra

        let mergedLaunchScreenConfig = ParraApp.configureLaunchScreen(
            with: launchScreenConfig
        )

        self.launchScreenConfig = mergedLaunchScreenConfig

        let parra = ParraInternal.createParraInstance(
            appState: appState,
            authenticationMethod: authenticationMethod,
            configuration: configuration
        )

        // Must be set before initializing app delegate instances, which rely
        // on it.
        Parra.default.parraInternal = parra

        self.parra = parra

        self._alertManager = State(
            wrappedValue: parra.alertManager
        )

        self._parraAppState = State(
            wrappedValue: appState
        )

        self._launchScreenState = State(
            wrappedValue: LaunchScreenStateManager(
                state: .initial(mergedLaunchScreenConfig)
            )
        )
    }

    // MARK: - Public

    public var body: some Scene {
        makeScene()
            .environment(\.parra, Parra.default)
            .environment(\.parraAuthState, authStateManager.current)
            .environment(\.parraTheme, themeManager.current)
            .environment(
                \.parraPreferredAppearance,
                themeManager.preferredAppearanceBinding
            )
            .environment(alertManager)
            .environment(launchScreenState)
            .environmentObject(parra.globalComponentFactory)
            .onChange(
                of: launchScreenState.current,
                initial: true
            ) { oldValue, newValue in
                switch (oldValue, newValue) {
                case (.initial, .initial):
                    // Should only run once on app launch.
                    performAppLaunchTasks()
                case (.initial, .transitioning(let result, _)):
                    Task {
                        // performAppLaunchTasks completing changes the launch
                        // screen state to transitioning, allowing this to start
                        await authStateManager.performInitialAuthCheck(
                            using: parra.authService,
                            appInfo: result.appInfo
                        )
                    }
                default:
                    break
                }
            }
            .onChange(
                of: authStateManager.current,
                onAuthStateChanged
            )
            .onChange(
                of: scenePhase
            ) { oldPhase, newPhase in
                // If the launch screen is in the failed state, retry performing
                // launch actions each time the app enters the foreground.
                if newPhase == .active && oldPhase != .active {
                    if case .failed = launchScreenState.current {
                        performAppLaunchTasks()
                    }
                }
            }
    }

    // MARK: - Private

    @Environment(\.scenePhase) private var scenePhase

    @SceneBuilder private let makeScene: @MainActor () -> Content

    @State private var parraAppState: ParraAppState
    @State private var launchScreenState: LaunchScreenStateManager
    @State private var alertManager: AlertManager
    @State private var authStateManager: ParraAuthStateManager = .shared
    @State private var themeManager: ParraThemeManager = .shared

    private let parra: ParraInternal
    private let authenticationMethod: ParraAuthType
    private let launchScreenConfig: ParraLaunchScreen.Config

    private static func configureLaunchScreen(
        with overrides: ParraLaunchScreen.Config?
    ) -> ParraLaunchScreen.Config {
        if let overrides {
            // If an override is provided, check its type. The default type
            // should only override Info.plist keys that are specified. Other
            // types should be used outright.

            if case .default(let config) = overrides.type {
                let finalConfig = ParraDefaultLaunchScreen.Config
                    .fromInfoDictionary(
                        in: config.bundle
                    )?.merging(overrides: config) ?? config

                return ParraLaunchScreen.Config(
                    type: .default(finalConfig),
                    fadeDuration: overrides.fadeDuration
                )
            } else {
                return overrides
            }
        }

        // If overrides are not provided, look for a default configuration in
        // the Info.plist, then look for a Storyboard configuration, then
        // finally use a default empty configuration.

        let bundle = Bundle.main // default
        let type: ParraLaunchScreenType = if let config = ParraDefaultLaunchScreen
            .Config.fromInfoDictionary(
                in: bundle
            )
        {
            .default(config)
        } else if let config = ParraStoryboardLaunchScreen.Config
            .fromInfoDictionary(in: bundle)
        {
            .storyboard(config)
        } else {
            .default(ParraDefaultLaunchScreen.Config())
        }

        return ParraLaunchScreen.Config(
            type: type,
            fadeDuration: ParraLaunchScreen.Config.defaultFadeDuration
        )
    }

    private func onAuthStateChanged(
        from oldAuthResult: ParraAuthState,
        to authResult: ParraAuthState
    ) {
        Task {
            await parra.authStateDidChange(
                from: oldAuthResult,
                to: authResult
            )
        }
    }

    private func performAppLaunchTasks() {
        Task(priority: .userInitiated) { @MainActor in // must remain main actor
            guard case .initial = launchScreenState.current else {
                return
            }

            logger.debug("Performing app launch tasks")

            ParraThemeManager.shared.current = parra.configuration.theme

            do {
                let result = try await parra
                    .performActionsRequiredForAppLaunch()

                logger.debug("Post app launch actions complete")

                logger.info("Parra SDK Initialized")

                launchScreenState.dismiss(
                    with: result,
                    launchScreenConfig: launchScreenConfig
                )

                logger.debug("Launch screen dismissed")
            } catch {
                logger.fatal(
                    "Failed to perform post app launch actions",
                    error
                )

                // This is unrecoverable. Force a logout.

                await parra.authService.forceLogout(from: error)

                launchScreenState.fail(
                    userMessage: "Failed to perform actions necessary to launch app.",
                    underlyingError: error
                )
            }
        }
    }
}
